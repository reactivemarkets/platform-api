// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENUM_REACTIVE_PAPI_H_
#define FLATBUFFERS_GENERATED_ENUM_REACTIVE_PAPI_H_

#include "flatbuffers/flatbuffers.h"

namespace reactive {
namespace papi {

enum class FeedType : int16_t {
  Default = 0,
  Trade = 1,
  Liquidation = 2,
  MIN = Default,
  MAX = Liquidation
};

inline const FeedType (&EnumValuesFeedType())[3] {
  static const FeedType values[] = {
    FeedType::Default,
    FeedType::Trade,
    FeedType::Liquidation
  };
  return values;
}

inline const char * const *EnumNamesFeedType() {
  static const char * const names[4] = {
    "Default",
    "Trade",
    "Liquidation",
    nullptr
  };
  return names;
}

inline const char *EnumNameFeedType(FeedType e) {
  if (flatbuffers::IsOutRange(e, FeedType::Default, FeedType::Liquidation)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFeedType()[index];
}

enum class Side : int8_t {
  Sell = -1,
  None = 0,
  Buy = 1,
  MIN = Sell,
  MAX = Buy
};

inline const Side (&EnumValuesSide())[3] {
  static const Side values[] = {
    Side::Sell,
    Side::None,
    Side::Buy
  };
  return values;
}

inline const char * const *EnumNamesSide() {
  static const char * const names[4] = {
    "Sell",
    "None",
    "Buy",
    nullptr
  };
  return names;
}

inline const char *EnumNameSide(Side e) {
  if (flatbuffers::IsOutRange(e, Side::Sell, Side::Buy)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(Side::Sell);
  return EnumNamesSide()[index];
}

enum class SubReqType : int8_t {
  Subscribe = 1,
  Unsubscribe = 2,
  MIN = Subscribe,
  MAX = Unsubscribe
};

inline const SubReqType (&EnumValuesSubReqType())[2] {
  static const SubReqType values[] = {
    SubReqType::Subscribe,
    SubReqType::Unsubscribe
  };
  return values;
}

inline const char * const *EnumNamesSubReqType() {
  static const char * const names[3] = {
    "Subscribe",
    "Unsubscribe",
    nullptr
  };
  return names;
}

inline const char *EnumNameSubReqType(SubReqType e) {
  if (flatbuffers::IsOutRange(e, SubReqType::Subscribe, SubReqType::Unsubscribe)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(SubReqType::Subscribe);
  return EnumNamesSubReqType()[index];
}

}  // namespace papi
}  // namespace reactive

#endif  // FLATBUFFERS_GENERATED_ENUM_REACTIVE_PAPI_H_
