// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ReactiveMarkets.PlatformApi
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FeedRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FeedRequest GetRootAsFeedRequest(ByteBuffer _bb) { return GetRootAsFeedRequest(_bb, new FeedRequest()); }
  public static FeedRequest GetRootAsFeedRequest(ByteBuffer _bb, FeedRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FeedRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ReqId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReqIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetReqIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetReqIdArray() { return __p.__vector_as_array<byte>(4); }
  public ReactiveMarkets.PlatformApi.SubReqType SubReqType { get { int o = __p.__offset(6); return o != 0 ? (ReactiveMarkets.PlatformApi.SubReqType)__p.bb.GetSbyte(o + __p.bb_pos) : ReactiveMarkets.PlatformApi.SubReqType.Subscribe; } }
  public ReactiveMarkets.PlatformApi.FeedType FeedType { get { int o = __p.__offset(8); return o != 0 ? (ReactiveMarkets.PlatformApi.FeedType)__p.bb.GetShort(o + __p.bb_pos) : ReactiveMarkets.PlatformApi.FeedType.Default; } }
  public ushort Grouping { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public short Depth { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Frequency { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Markets(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MarketsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ReactiveMarkets.PlatformApi.FeedRequest> CreateFeedRequest(FlatBufferBuilder builder,
      StringOffset req_idOffset = default(StringOffset),
      ReactiveMarkets.PlatformApi.SubReqType sub_req_type = ReactiveMarkets.PlatformApi.SubReqType.Subscribe,
      ReactiveMarkets.PlatformApi.FeedType feed_type = ReactiveMarkets.PlatformApi.FeedType.Default,
      ushort grouping = 0,
      short depth = 0,
      short frequency = 0,
      VectorOffset marketsOffset = default(VectorOffset)) {
    builder.StartTable(7);
    FeedRequest.AddMarkets(builder, marketsOffset);
    FeedRequest.AddReqId(builder, req_idOffset);
    FeedRequest.AddFrequency(builder, frequency);
    FeedRequest.AddDepth(builder, depth);
    FeedRequest.AddGrouping(builder, grouping);
    FeedRequest.AddFeedType(builder, feed_type);
    FeedRequest.AddSubReqType(builder, sub_req_type);
    return FeedRequest.EndFeedRequest(builder);
  }

  public static void StartFeedRequest(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddReqId(FlatBufferBuilder builder, StringOffset reqIdOffset) { builder.AddOffset(0, reqIdOffset.Value, 0); }
  public static void AddSubReqType(FlatBufferBuilder builder, ReactiveMarkets.PlatformApi.SubReqType subReqType) { builder.AddSbyte(1, (sbyte)subReqType, 1); }
  public static void AddFeedType(FlatBufferBuilder builder, ReactiveMarkets.PlatformApi.FeedType feedType) { builder.AddShort(2, (short)feedType, 0); }
  public static void AddGrouping(FlatBufferBuilder builder, ushort grouping) { builder.AddUshort(3, grouping, 0); }
  public static void AddDepth(FlatBufferBuilder builder, short depth) { builder.AddShort(4, depth, 0); }
  public static void AddFrequency(FlatBufferBuilder builder, short frequency) { builder.AddShort(5, frequency, 0); }
  public static void AddMarkets(FlatBufferBuilder builder, VectorOffset marketsOffset) { builder.AddOffset(6, marketsOffset.Value, 0); }
  public static VectorOffset CreateMarketsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMarketsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMarketsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ReactiveMarkets.PlatformApi.FeedRequest> EndFeedRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ReactiveMarkets.PlatformApi.FeedRequest>(o);
  }
};


}
